// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: video.go

package openrtb

import (
	"bytes"
	"encoding/json"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *jsonVideo) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *jsonVideo) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if len(j.Mimes) != 0 {
		buf.WriteString(`"mimes":`)
		if j.Mimes != nil {
			buf.WriteString(`[`)
			for i, v := range j.Mimes {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if j.MinDuration != 0 {
		buf.WriteString(`"minduration":`)
		fflib.FormatBits2(buf, uint64(j.MinDuration), 10, j.MinDuration < 0)
		buf.WriteByte(',')
	}
	if j.MaxDuration != 0 {
		buf.WriteString(`"maxduration":`)
		fflib.FormatBits2(buf, uint64(j.MaxDuration), 10, j.MaxDuration < 0)
		buf.WriteByte(',')
	}
	if j.Protocol != 0 {
		buf.WriteString(`"protocol":`)
		fflib.FormatBits2(buf, uint64(j.Protocol), 10, j.Protocol < 0)
		buf.WriteByte(',')
	}
	if len(j.Protocols) != 0 {
		buf.WriteString(`"protocols":`)
		if j.Protocols != nil {
			buf.WriteString(`[`)
			for i, v := range j.Protocols {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.FormatBits2(buf, uint64(v), 10, v < 0)
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if j.W != 0 {
		buf.WriteString(`"w":`)
		fflib.FormatBits2(buf, uint64(j.W), 10, j.W < 0)
		buf.WriteByte(',')
	}
	if j.H != 0 {
		buf.WriteString(`"h":`)
		fflib.FormatBits2(buf, uint64(j.H), 10, j.H < 0)
		buf.WriteByte(',')
	}
	if j.StartDelay != 0 {
		buf.WriteString(`"startdelay":`)
		fflib.FormatBits2(buf, uint64(j.StartDelay), 10, j.StartDelay < 0)
		buf.WriteByte(',')
	}
	if j.Linearity != 0 {
		buf.WriteString(`"linearity":`)
		fflib.FormatBits2(buf, uint64(j.Linearity), 10, j.Linearity < 0)
		buf.WriteByte(',')
	}
	if j.Sequence != 0 {
		buf.WriteString(`"sequence":`)
		fflib.FormatBits2(buf, uint64(j.Sequence), 10, j.Sequence < 0)
		buf.WriteByte(',')
	}
	if len(j.BAttr) != 0 {
		buf.WriteString(`"battr":`)
		if j.BAttr != nil {
			buf.WriteString(`[`)
			for i, v := range j.BAttr {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.FormatBits2(buf, uint64(v), 10, v < 0)
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if j.MaxExtended != 0 {
		buf.WriteString(`"maxextended":`)
		fflib.FormatBits2(buf, uint64(j.MaxExtended), 10, j.MaxExtended < 0)
		buf.WriteByte(',')
	}
	if j.MinBitrate != 0 {
		buf.WriteString(`"minbitrate":`)
		fflib.FormatBits2(buf, uint64(j.MinBitrate), 10, j.MinBitrate < 0)
		buf.WriteByte(',')
	}
	if j.MaxBitrate != 0 {
		buf.WriteString(`"maxbitrate":`)
		fflib.FormatBits2(buf, uint64(j.MaxBitrate), 10, j.MaxBitrate < 0)
		buf.WriteByte(',')
	}
	if j.BoxingAllowed != nil {
		if true {
			buf.WriteString(`"boxingallowed":`)
			fflib.FormatBits2(buf, uint64(*j.BoxingAllowed), 10, *j.BoxingAllowed < 0)
			buf.WriteByte(',')
		}
	}
	if len(j.PlaybackMethod) != 0 {
		buf.WriteString(`"playbackmethod":`)
		if j.PlaybackMethod != nil {
			buf.WriteString(`[`)
			for i, v := range j.PlaybackMethod {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.FormatBits2(buf, uint64(v), 10, v < 0)
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(j.Delivery) != 0 {
		buf.WriteString(`"delivery":`)
		if j.Delivery != nil {
			buf.WriteString(`[`)
			for i, v := range j.Delivery {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.FormatBits2(buf, uint64(v), 10, v < 0)
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if j.Pos != 0 {
		buf.WriteString(`"pos":`)
		fflib.FormatBits2(buf, uint64(j.Pos), 10, j.Pos < 0)
		buf.WriteByte(',')
	}
	if len(j.CompanionAd) != 0 {
		buf.WriteString(`"companionad":`)
		if j.CompanionAd != nil {
			buf.WriteString(`[`)
			for i, v := range j.CompanionAd {
				if i != 0 {
					buf.WriteString(`,`)
				}

				{

					err = v.MarshalJSONBuf(buf)
					if err != nil {
						return err
					}

				}
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(j.Api) != 0 {
		buf.WriteString(`"api":`)
		if j.Api != nil {
			buf.WriteString(`[`)
			for i, v := range j.Api {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.FormatBits2(buf, uint64(v), 10, v < 0)
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(j.CompanionType) != 0 {
		buf.WriteString(`"companiontype":`)
		if j.CompanionType != nil {
			buf.WriteString(`[`)
			for i, v := range j.CompanionType {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.FormatBits2(buf, uint64(v), 10, v < 0)
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if j.Skip != 0 {
		buf.WriteString(`"skip":`)
		fflib.FormatBits2(buf, uint64(j.Skip), 10, j.Skip < 0)
		buf.WriteByte(',')
	}
	if j.Ext != nil {
		if true {
			buf.WriteString(`"ext":`)

			{

				obj, err = j.Ext.MarshalJSON()
				if err != nil {
					return err
				}
				buf.Write(obj)

			}
			buf.WriteByte(',')
		}
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtjsonVideobase = iota
	ffjtjsonVideonosuchkey

	ffjtjsonVideoMimes

	ffjtjsonVideoMinDuration

	ffjtjsonVideoMaxDuration

	ffjtjsonVideoProtocol

	ffjtjsonVideoProtocols

	ffjtjsonVideoW

	ffjtjsonVideoH

	ffjtjsonVideoStartDelay

	ffjtjsonVideoLinearity

	ffjtjsonVideoSequence

	ffjtjsonVideoBAttr

	ffjtjsonVideoMaxExtended

	ffjtjsonVideoMinBitrate

	ffjtjsonVideoMaxBitrate

	ffjtjsonVideoBoxingAllowed

	ffjtjsonVideoPlaybackMethod

	ffjtjsonVideoDelivery

	ffjtjsonVideoPos

	ffjtjsonVideoCompanionAd

	ffjtjsonVideoApi

	ffjtjsonVideoCompanionType

	ffjtjsonVideoSkip

	ffjtjsonVideoExt
)

var ffjKeyjsonVideoMimes = []byte("mimes")

var ffjKeyjsonVideoMinDuration = []byte("minduration")

var ffjKeyjsonVideoMaxDuration = []byte("maxduration")

var ffjKeyjsonVideoProtocol = []byte("protocol")

var ffjKeyjsonVideoProtocols = []byte("protocols")

var ffjKeyjsonVideoW = []byte("w")

var ffjKeyjsonVideoH = []byte("h")

var ffjKeyjsonVideoStartDelay = []byte("startdelay")

var ffjKeyjsonVideoLinearity = []byte("linearity")

var ffjKeyjsonVideoSequence = []byte("sequence")

var ffjKeyjsonVideoBAttr = []byte("battr")

var ffjKeyjsonVideoMaxExtended = []byte("maxextended")

var ffjKeyjsonVideoMinBitrate = []byte("minbitrate")

var ffjKeyjsonVideoMaxBitrate = []byte("maxbitrate")

var ffjKeyjsonVideoBoxingAllowed = []byte("boxingallowed")

var ffjKeyjsonVideoPlaybackMethod = []byte("playbackmethod")

var ffjKeyjsonVideoDelivery = []byte("delivery")

var ffjKeyjsonVideoPos = []byte("pos")

var ffjKeyjsonVideoCompanionAd = []byte("companionad")

var ffjKeyjsonVideoApi = []byte("api")

var ffjKeyjsonVideoCompanionType = []byte("companiontype")

var ffjKeyjsonVideoSkip = []byte("skip")

var ffjKeyjsonVideoExt = []byte("ext")

// UnmarshalJSON umarshall json - template of ffjson
func (j *jsonVideo) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *jsonVideo) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtjsonVideobase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtjsonVideonosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffjKeyjsonVideoApi, kn) {
						currentKey = ffjtjsonVideoApi
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'b':

					if bytes.Equal(ffjKeyjsonVideoBAttr, kn) {
						currentKey = ffjtjsonVideoBAttr
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyjsonVideoBoxingAllowed, kn) {
						currentKey = ffjtjsonVideoBoxingAllowed
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffjKeyjsonVideoCompanionAd, kn) {
						currentKey = ffjtjsonVideoCompanionAd
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyjsonVideoCompanionType, kn) {
						currentKey = ffjtjsonVideoCompanionType
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'd':

					if bytes.Equal(ffjKeyjsonVideoDelivery, kn) {
						currentKey = ffjtjsonVideoDelivery
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffjKeyjsonVideoExt, kn) {
						currentKey = ffjtjsonVideoExt
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'h':

					if bytes.Equal(ffjKeyjsonVideoH, kn) {
						currentKey = ffjtjsonVideoH
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffjKeyjsonVideoLinearity, kn) {
						currentKey = ffjtjsonVideoLinearity
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffjKeyjsonVideoMimes, kn) {
						currentKey = ffjtjsonVideoMimes
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyjsonVideoMinDuration, kn) {
						currentKey = ffjtjsonVideoMinDuration
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyjsonVideoMaxDuration, kn) {
						currentKey = ffjtjsonVideoMaxDuration
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyjsonVideoMaxExtended, kn) {
						currentKey = ffjtjsonVideoMaxExtended
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyjsonVideoMinBitrate, kn) {
						currentKey = ffjtjsonVideoMinBitrate
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyjsonVideoMaxBitrate, kn) {
						currentKey = ffjtjsonVideoMaxBitrate
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeyjsonVideoProtocol, kn) {
						currentKey = ffjtjsonVideoProtocol
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyjsonVideoProtocols, kn) {
						currentKey = ffjtjsonVideoProtocols
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyjsonVideoPlaybackMethod, kn) {
						currentKey = ffjtjsonVideoPlaybackMethod
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyjsonVideoPos, kn) {
						currentKey = ffjtjsonVideoPos
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeyjsonVideoStartDelay, kn) {
						currentKey = ffjtjsonVideoStartDelay
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyjsonVideoSequence, kn) {
						currentKey = ffjtjsonVideoSequence
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyjsonVideoSkip, kn) {
						currentKey = ffjtjsonVideoSkip
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'w':

					if bytes.Equal(ffjKeyjsonVideoW, kn) {
						currentKey = ffjtjsonVideoW
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffjKeyjsonVideoExt, kn) {
					currentKey = ffjtjsonVideoExt
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyjsonVideoSkip, kn) {
					currentKey = ffjtjsonVideoSkip
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyjsonVideoCompanionType, kn) {
					currentKey = ffjtjsonVideoCompanionType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyjsonVideoApi, kn) {
					currentKey = ffjtjsonVideoApi
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyjsonVideoCompanionAd, kn) {
					currentKey = ffjtjsonVideoCompanionAd
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyjsonVideoPos, kn) {
					currentKey = ffjtjsonVideoPos
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyjsonVideoDelivery, kn) {
					currentKey = ffjtjsonVideoDelivery
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyjsonVideoPlaybackMethod, kn) {
					currentKey = ffjtjsonVideoPlaybackMethod
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyjsonVideoBoxingAllowed, kn) {
					currentKey = ffjtjsonVideoBoxingAllowed
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyjsonVideoMaxBitrate, kn) {
					currentKey = ffjtjsonVideoMaxBitrate
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyjsonVideoMinBitrate, kn) {
					currentKey = ffjtjsonVideoMinBitrate
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyjsonVideoMaxExtended, kn) {
					currentKey = ffjtjsonVideoMaxExtended
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyjsonVideoBAttr, kn) {
					currentKey = ffjtjsonVideoBAttr
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyjsonVideoSequence, kn) {
					currentKey = ffjtjsonVideoSequence
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyjsonVideoLinearity, kn) {
					currentKey = ffjtjsonVideoLinearity
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyjsonVideoStartDelay, kn) {
					currentKey = ffjtjsonVideoStartDelay
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyjsonVideoH, kn) {
					currentKey = ffjtjsonVideoH
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyjsonVideoW, kn) {
					currentKey = ffjtjsonVideoW
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyjsonVideoProtocols, kn) {
					currentKey = ffjtjsonVideoProtocols
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyjsonVideoProtocol, kn) {
					currentKey = ffjtjsonVideoProtocol
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyjsonVideoMaxDuration, kn) {
					currentKey = ffjtjsonVideoMaxDuration
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyjsonVideoMinDuration, kn) {
					currentKey = ffjtjsonVideoMinDuration
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyjsonVideoMimes, kn) {
					currentKey = ffjtjsonVideoMimes
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtjsonVideonosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtjsonVideoMimes:
					goto handle_Mimes

				case ffjtjsonVideoMinDuration:
					goto handle_MinDuration

				case ffjtjsonVideoMaxDuration:
					goto handle_MaxDuration

				case ffjtjsonVideoProtocol:
					goto handle_Protocol

				case ffjtjsonVideoProtocols:
					goto handle_Protocols

				case ffjtjsonVideoW:
					goto handle_W

				case ffjtjsonVideoH:
					goto handle_H

				case ffjtjsonVideoStartDelay:
					goto handle_StartDelay

				case ffjtjsonVideoLinearity:
					goto handle_Linearity

				case ffjtjsonVideoSequence:
					goto handle_Sequence

				case ffjtjsonVideoBAttr:
					goto handle_BAttr

				case ffjtjsonVideoMaxExtended:
					goto handle_MaxExtended

				case ffjtjsonVideoMinBitrate:
					goto handle_MinBitrate

				case ffjtjsonVideoMaxBitrate:
					goto handle_MaxBitrate

				case ffjtjsonVideoBoxingAllowed:
					goto handle_BoxingAllowed

				case ffjtjsonVideoPlaybackMethod:
					goto handle_PlaybackMethod

				case ffjtjsonVideoDelivery:
					goto handle_Delivery

				case ffjtjsonVideoPos:
					goto handle_Pos

				case ffjtjsonVideoCompanionAd:
					goto handle_CompanionAd

				case ffjtjsonVideoApi:
					goto handle_Api

				case ffjtjsonVideoCompanionType:
					goto handle_CompanionType

				case ffjtjsonVideoSkip:
					goto handle_Skip

				case ffjtjsonVideoExt:
					goto handle_Ext

				case ffjtjsonVideonosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Mimes:

	/* handler: j.Mimes type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.Mimes = nil
		} else {

			j.Mimes = []string{}

			wantVal := true

			for {

				var tmpJMimes string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJMimes type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmpJMimes = string(string(outBuf))

					}
				}

				j.Mimes = append(j.Mimes, tmpJMimes)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MinDuration:

	/* handler: j.MinDuration type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.MinDuration = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MaxDuration:

	/* handler: j.MaxDuration type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.MaxDuration = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Protocol:

	/* handler: j.Protocol type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Protocol = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Protocols:

	/* handler: j.Protocols type=[]int kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.Protocols = nil
		} else {

			j.Protocols = []int{}

			wantVal := true

			for {

				var tmpJProtocols int

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJProtocols type=int kind=int quoted=false*/

				{
					if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
						return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
					}
				}

				{

					if tok == fflib.FFTok_null {

					} else {

						tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

						if err != nil {
							return fs.WrapErr(err)
						}

						tmpJProtocols = int(tval)

					}
				}

				j.Protocols = append(j.Protocols, tmpJProtocols)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_W:

	/* handler: j.W type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.W = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_H:

	/* handler: j.H type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.H = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_StartDelay:

	/* handler: j.StartDelay type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.StartDelay = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Linearity:

	/* handler: j.Linearity type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Linearity = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Sequence:

	/* handler: j.Sequence type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Sequence = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_BAttr:

	/* handler: j.BAttr type=[]int kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.BAttr = nil
		} else {

			j.BAttr = []int{}

			wantVal := true

			for {

				var tmpJBAttr int

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJBAttr type=int kind=int quoted=false*/

				{
					if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
						return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
					}
				}

				{

					if tok == fflib.FFTok_null {

					} else {

						tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

						if err != nil {
							return fs.WrapErr(err)
						}

						tmpJBAttr = int(tval)

					}
				}

				j.BAttr = append(j.BAttr, tmpJBAttr)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MaxExtended:

	/* handler: j.MaxExtended type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.MaxExtended = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MinBitrate:

	/* handler: j.MinBitrate type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.MinBitrate = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MaxBitrate:

	/* handler: j.MaxBitrate type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.MaxBitrate = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_BoxingAllowed:

	/* handler: j.BoxingAllowed type=openrtb.NumberOrBool kind=int quoted=false*/

	{
		if tok == fflib.FFTok_null {

			j.BoxingAllowed = nil

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			if j.BoxingAllowed == nil {
				j.BoxingAllowed = new(NumberOrBool)
			}

			err = j.BoxingAllowed.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PlaybackMethod:

	/* handler: j.PlaybackMethod type=[]int kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.PlaybackMethod = nil
		} else {

			j.PlaybackMethod = []int{}

			wantVal := true

			for {

				var tmpJPlaybackMethod int

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJPlaybackMethod type=int kind=int quoted=false*/

				{
					if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
						return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
					}
				}

				{

					if tok == fflib.FFTok_null {

					} else {

						tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

						if err != nil {
							return fs.WrapErr(err)
						}

						tmpJPlaybackMethod = int(tval)

					}
				}

				j.PlaybackMethod = append(j.PlaybackMethod, tmpJPlaybackMethod)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Delivery:

	/* handler: j.Delivery type=[]int kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.Delivery = nil
		} else {

			j.Delivery = []int{}

			wantVal := true

			for {

				var tmpJDelivery int

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJDelivery type=int kind=int quoted=false*/

				{
					if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
						return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
					}
				}

				{

					if tok == fflib.FFTok_null {

					} else {

						tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

						if err != nil {
							return fs.WrapErr(err)
						}

						tmpJDelivery = int(tval)

					}
				}

				j.Delivery = append(j.Delivery, tmpJDelivery)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Pos:

	/* handler: j.Pos type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Pos = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CompanionAd:

	/* handler: j.CompanionAd type=[]openrtb.Banner kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.CompanionAd = nil
		} else {

			j.CompanionAd = []Banner{}

			wantVal := true

			for {

				var tmpJCompanionAd Banner

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJCompanionAd type=openrtb.Banner kind=struct quoted=false*/

				{
					if tok == fflib.FFTok_null {

					} else {

						err = tmpJCompanionAd.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
						if err != nil {
							return err
						}
					}
					state = fflib.FFParse_after_value
				}

				j.CompanionAd = append(j.CompanionAd, tmpJCompanionAd)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Api:

	/* handler: j.Api type=[]int kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.Api = nil
		} else {

			j.Api = []int{}

			wantVal := true

			for {

				var tmpJApi int

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJApi type=int kind=int quoted=false*/

				{
					if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
						return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
					}
				}

				{

					if tok == fflib.FFTok_null {

					} else {

						tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

						if err != nil {
							return fs.WrapErr(err)
						}

						tmpJApi = int(tval)

					}
				}

				j.Api = append(j.Api, tmpJApi)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CompanionType:

	/* handler: j.CompanionType type=[]int kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.CompanionType = nil
		} else {

			j.CompanionType = []int{}

			wantVal := true

			for {

				var tmpJCompanionType int

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJCompanionType type=int kind=int quoted=false*/

				{
					if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
						return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
					}
				}

				{

					if tok == fflib.FFTok_null {

					} else {

						tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

						if err != nil {
							return fs.WrapErr(err)
						}

						tmpJCompanionType = int(tval)

					}
				}

				j.CompanionType = append(j.CompanionType, tmpJCompanionType)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Skip:

	/* handler: j.Skip type=openrtb.NumberOrBool kind=int quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.Skip.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ext:

	/* handler: j.Ext type=json.RawMessage kind=slice quoted=false*/

	{
		if tok == fflib.FFTok_null {

			j.Ext = nil

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			if j.Ext == nil {
				j.Ext = new(json.RawMessage)
			}

			err = j.Ext.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
