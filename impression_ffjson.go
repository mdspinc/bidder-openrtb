// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: impression.go

package openrtb

import (
	"bytes"
	"encoding/json"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *Impression) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Impression) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ "id":`)
	fflib.WriteJsonString(buf, string(j.ID))
	buf.WriteByte(',')
	if j.Banner != nil {
		if true {
			buf.WriteString(`"banner":`)

			{

				err = j.Banner.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if j.Video != nil {
		if true {
			buf.WriteString(`"video":`)

			{

				obj, err = j.Video.MarshalJSON()
				if err != nil {
					return err
				}
				buf.Write(obj)

			}
			buf.WriteByte(',')
		}
	}
	if j.Native != nil {
		if true {
			buf.WriteString(`"native":`)

			{

				obj, err = j.Native.MarshalJSON()
				if err != nil {
					return err
				}
				buf.Write(obj)

			}
			buf.WriteByte(',')
		}
	}
	if len(j.DisplayManager) != 0 {
		buf.WriteString(`"displaymanager":`)
		fflib.WriteJsonString(buf, string(j.DisplayManager))
		buf.WriteByte(',')
	}
	if len(j.DisplayManagerVer) != 0 {
		buf.WriteString(`"displaymanagerver":`)
		fflib.WriteJsonString(buf, string(j.DisplayManagerVer))
		buf.WriteByte(',')
	}
	if j.Instl != 0 {
		buf.WriteString(`"instl":`)
		fflib.FormatBits2(buf, uint64(j.Instl), 10, j.Instl < 0)
		buf.WriteByte(',')
	}
	if len(j.TagID) != 0 {
		buf.WriteString(`"tagid":`)
		fflib.WriteJsonString(buf, string(j.TagID))
		buf.WriteByte(',')
	}
	if j.BidFloor != 0 {
		buf.WriteString(`"bidfloor":`)
		fflib.AppendFloat(buf, float64(j.BidFloor), 'g', -1, 64)
		buf.WriteByte(',')
	}
	if len(j.BidFloorCurrency) != 0 {
		buf.WriteString(`"bidfloorcur":`)
		fflib.WriteJsonString(buf, string(j.BidFloorCurrency))
		buf.WriteByte(',')
	}
	if j.Secure != 0 {
		buf.WriteString(`"secure":`)
		fflib.FormatBits2(buf, uint64(j.Secure), 10, j.Secure < 0)
		buf.WriteByte(',')
	}
	if len(j.IFrameBuster) != 0 {
		buf.WriteString(`"iframebuster":`)
		if j.IFrameBuster != nil {
			buf.WriteString(`[`)
			for i, v := range j.IFrameBuster {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if j.Pmp != nil {
		if true {
			buf.WriteString(`"pmp":`)

			{

				err = j.Pmp.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if j.Exp != 0 {
		buf.WriteString(`"exp":`)
		fflib.FormatBits2(buf, uint64(j.Exp), 10, j.Exp < 0)
		buf.WriteByte(',')
	}
	if j.Ext != nil {
		if true {
			buf.WriteString(`"ext":`)

			{

				obj, err = j.Ext.MarshalJSON()
				if err != nil {
					return err
				}
				buf.Write(obj)

			}
			buf.WriteByte(',')
		}
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtImpressionbase = iota
	ffjtImpressionnosuchkey

	ffjtImpressionID

	ffjtImpressionBanner

	ffjtImpressionVideo

	ffjtImpressionNative

	ffjtImpressionDisplayManager

	ffjtImpressionDisplayManagerVer

	ffjtImpressionInstl

	ffjtImpressionTagID

	ffjtImpressionBidFloor

	ffjtImpressionBidFloorCurrency

	ffjtImpressionSecure

	ffjtImpressionIFrameBuster

	ffjtImpressionPmp

	ffjtImpressionExp

	ffjtImpressionExt
)

var ffjKeyImpressionID = []byte("id")

var ffjKeyImpressionBanner = []byte("banner")

var ffjKeyImpressionVideo = []byte("video")

var ffjKeyImpressionNative = []byte("native")

var ffjKeyImpressionDisplayManager = []byte("displaymanager")

var ffjKeyImpressionDisplayManagerVer = []byte("displaymanagerver")

var ffjKeyImpressionInstl = []byte("instl")

var ffjKeyImpressionTagID = []byte("tagid")

var ffjKeyImpressionBidFloor = []byte("bidfloor")

var ffjKeyImpressionBidFloorCurrency = []byte("bidfloorcur")

var ffjKeyImpressionSecure = []byte("secure")

var ffjKeyImpressionIFrameBuster = []byte("iframebuster")

var ffjKeyImpressionPmp = []byte("pmp")

var ffjKeyImpressionExp = []byte("exp")

var ffjKeyImpressionExt = []byte("ext")

// UnmarshalJSON umarshall json - template of ffjson
func (j *Impression) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *Impression) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtImpressionbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtImpressionnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'b':

					if bytes.Equal(ffjKeyImpressionBanner, kn) {
						currentKey = ffjtImpressionBanner
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyImpressionBidFloor, kn) {
						currentKey = ffjtImpressionBidFloor
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyImpressionBidFloorCurrency, kn) {
						currentKey = ffjtImpressionBidFloorCurrency
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'd':

					if bytes.Equal(ffjKeyImpressionDisplayManager, kn) {
						currentKey = ffjtImpressionDisplayManager
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyImpressionDisplayManagerVer, kn) {
						currentKey = ffjtImpressionDisplayManagerVer
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffjKeyImpressionExp, kn) {
						currentKey = ffjtImpressionExp
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyImpressionExt, kn) {
						currentKey = ffjtImpressionExt
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffjKeyImpressionID, kn) {
						currentKey = ffjtImpressionID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyImpressionInstl, kn) {
						currentKey = ffjtImpressionInstl
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyImpressionIFrameBuster, kn) {
						currentKey = ffjtImpressionIFrameBuster
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'n':

					if bytes.Equal(ffjKeyImpressionNative, kn) {
						currentKey = ffjtImpressionNative
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeyImpressionPmp, kn) {
						currentKey = ffjtImpressionPmp
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffjKeyImpressionSecure, kn) {
						currentKey = ffjtImpressionSecure
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeyImpressionTagID, kn) {
						currentKey = ffjtImpressionTagID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'v':

					if bytes.Equal(ffjKeyImpressionVideo, kn) {
						currentKey = ffjtImpressionVideo
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffjKeyImpressionExt, kn) {
					currentKey = ffjtImpressionExt
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyImpressionExp, kn) {
					currentKey = ffjtImpressionExp
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyImpressionPmp, kn) {
					currentKey = ffjtImpressionPmp
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyImpressionIFrameBuster, kn) {
					currentKey = ffjtImpressionIFrameBuster
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyImpressionSecure, kn) {
					currentKey = ffjtImpressionSecure
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyImpressionBidFloorCurrency, kn) {
					currentKey = ffjtImpressionBidFloorCurrency
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyImpressionBidFloor, kn) {
					currentKey = ffjtImpressionBidFloor
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyImpressionTagID, kn) {
					currentKey = ffjtImpressionTagID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyImpressionInstl, kn) {
					currentKey = ffjtImpressionInstl
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyImpressionDisplayManagerVer, kn) {
					currentKey = ffjtImpressionDisplayManagerVer
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyImpressionDisplayManager, kn) {
					currentKey = ffjtImpressionDisplayManager
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyImpressionNative, kn) {
					currentKey = ffjtImpressionNative
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyImpressionVideo, kn) {
					currentKey = ffjtImpressionVideo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyImpressionBanner, kn) {
					currentKey = ffjtImpressionBanner
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyImpressionID, kn) {
					currentKey = ffjtImpressionID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtImpressionnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtImpressionID:
					goto handle_ID

				case ffjtImpressionBanner:
					goto handle_Banner

				case ffjtImpressionVideo:
					goto handle_Video

				case ffjtImpressionNative:
					goto handle_Native

				case ffjtImpressionDisplayManager:
					goto handle_DisplayManager

				case ffjtImpressionDisplayManagerVer:
					goto handle_DisplayManagerVer

				case ffjtImpressionInstl:
					goto handle_Instl

				case ffjtImpressionTagID:
					goto handle_TagID

				case ffjtImpressionBidFloor:
					goto handle_BidFloor

				case ffjtImpressionBidFloorCurrency:
					goto handle_BidFloorCurrency

				case ffjtImpressionSecure:
					goto handle_Secure

				case ffjtImpressionIFrameBuster:
					goto handle_IFrameBuster

				case ffjtImpressionPmp:
					goto handle_Pmp

				case ffjtImpressionExp:
					goto handle_Exp

				case ffjtImpressionExt:
					goto handle_Ext

				case ffjtImpressionnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_ID:

	/* handler: j.ID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Banner:

	/* handler: j.Banner type=openrtb.Banner kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			j.Banner = nil

		} else {

			if j.Banner == nil {
				j.Banner = new(Banner)
			}

			err = j.Banner.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
			if err != nil {
				return err
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Video:

	/* handler: j.Video type=openrtb.Video kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			j.Video = nil

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			if j.Video == nil {
				j.Video = new(Video)
			}

			err = j.Video.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Native:

	/* handler: j.Native type=openrtb.Native kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			j.Native = nil

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			if j.Native == nil {
				j.Native = new(Native)
			}

			err = j.Native.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DisplayManager:

	/* handler: j.DisplayManager type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.DisplayManager = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DisplayManagerVer:

	/* handler: j.DisplayManagerVer type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.DisplayManagerVer = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Instl:

	/* handler: j.Instl type=openrtb.NumberOrBool kind=int quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.Instl.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_TagID:

	/* handler: j.TagID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.TagID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_BidFloor:

	/* handler: j.BidFloor type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.BidFloor = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_BidFloorCurrency:

	/* handler: j.BidFloorCurrency type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.BidFloorCurrency = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Secure:

	/* handler: j.Secure type=openrtb.NumberOrBool kind=int quoted=false*/

	{
		if tok == fflib.FFTok_null {

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			err = j.Secure.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_IFrameBuster:

	/* handler: j.IFrameBuster type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.IFrameBuster = nil
		} else {

			j.IFrameBuster = []string{}

			wantVal := true

			for {

				var tmpJIFrameBuster string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJIFrameBuster type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmpJIFrameBuster = string(string(outBuf))

					}
				}

				j.IFrameBuster = append(j.IFrameBuster, tmpJIFrameBuster)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Pmp:

	/* handler: j.Pmp type=openrtb.Pmp kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			j.Pmp = nil

		} else {

			if j.Pmp == nil {
				j.Pmp = new(Pmp)
			}

			err = j.Pmp.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
			if err != nil {
				return err
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Exp:

	/* handler: j.Exp type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Exp = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ext:

	/* handler: j.Ext type=json.RawMessage kind=slice quoted=false*/

	{
		if tok == fflib.FFTok_null {

			j.Ext = nil

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			if j.Ext == nil {
				j.Ext = new(json.RawMessage)
			}

			err = j.Ext.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
