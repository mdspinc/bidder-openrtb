// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: bid.go

package openrtb

import (
	"bytes"
	"encoding/json"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *Bid) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Bid) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ "id":`)
	fflib.WriteJsonString(buf, string(j.ID))
	buf.WriteString(`,"impid":`)
	fflib.WriteJsonString(buf, string(j.ImpID))
	buf.WriteString(`,"price":`)
	fflib.AppendFloat(buf, float64(j.Price), 'g', -1, 64)
	buf.WriteByte(',')
	if len(j.AdID) != 0 {
		buf.WriteString(`"adid":`)
		fflib.WriteJsonString(buf, string(j.AdID))
		buf.WriteByte(',')
	}
	if len(j.NURL) != 0 {
		buf.WriteString(`"nurl":`)
		fflib.WriteJsonString(buf, string(j.NURL))
		buf.WriteByte(',')
	}
	if len(j.BURL) != 0 {
		buf.WriteString(`"burl":`)
		fflib.WriteJsonString(buf, string(j.BURL))
		buf.WriteByte(',')
	}
	if len(j.LURL) != 0 {
		buf.WriteString(`"lurl":`)
		fflib.WriteJsonString(buf, string(j.LURL))
		buf.WriteByte(',')
	}
	if len(j.AdMarkup) != 0 {
		buf.WriteString(`"adm":`)
		fflib.WriteJsonString(buf, string(j.AdMarkup))
		buf.WriteByte(',')
	}
	if len(j.AdvDomain) != 0 {
		buf.WriteString(`"adomain":`)
		if j.AdvDomain != nil {
			buf.WriteString(`[`)
			for i, v := range j.AdvDomain {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(j.IURL) != 0 {
		buf.WriteString(`"iurl":`)
		fflib.WriteJsonString(buf, string(j.IURL))
		buf.WriteByte(',')
	}
	if len(j.Tactic) != 0 {
		buf.WriteString(`"tactic":`)
		fflib.WriteJsonString(buf, string(j.Tactic))
		buf.WriteByte(',')
	}
	if len(j.Bundle) != 0 {
		buf.WriteString(`"bundle":`)
		fflib.WriteJsonString(buf, string(j.Bundle))
		buf.WriteByte(',')
	}
	if len(j.CampaignID) != 0 {
		buf.WriteString(`"cid":`)
		fflib.WriteJsonString(buf, string(j.CampaignID))
		buf.WriteByte(',')
	}
	if len(j.CreativeID) != 0 {
		buf.WriteString(`"crid":`)
		fflib.WriteJsonString(buf, string(j.CreativeID))
		buf.WriteByte(',')
	}
	if j.Qagmediarating != 0 {
		buf.WriteString(`"qagmediarating":`)
		fflib.FormatBits2(buf, uint64(j.Qagmediarating), 10, j.Qagmediarating < 0)
		buf.WriteByte(',')
	}
	if len(j.Language) != 0 {
		buf.WriteString(`"language":`)
		fflib.WriteJsonString(buf, string(j.Language))
		buf.WriteByte(',')
	}
	if len(j.Cat) != 0 {
		buf.WriteString(`"cat":`)
		if j.Cat != nil {
			buf.WriteString(`[`)
			for i, v := range j.Cat {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(j.Attr) != 0 {
		buf.WriteString(`"attr":`)
		if j.Attr != nil {
			buf.WriteString(`[`)
			for i, v := range j.Attr {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.FormatBits2(buf, uint64(v), 10, v < 0)
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if len(j.API) != 0 {
		buf.WriteString(`"api":`)
		fflib.WriteJsonString(buf, string(j.API))
		buf.WriteByte(',')
	}
	if j.Protocol != 0 {
		buf.WriteString(`"protocol":`)
		fflib.FormatBits2(buf, uint64(j.Protocol), 10, j.Protocol < 0)
		buf.WriteByte(',')
	}
	if len(j.DealID) != 0 {
		buf.WriteString(`"dealid":`)
		fflib.WriteJsonString(buf, string(j.DealID))
		buf.WriteByte(',')
	}
	if j.H != 0 {
		buf.WriteString(`"h":`)
		fflib.FormatBits2(buf, uint64(j.H), 10, j.H < 0)
		buf.WriteByte(',')
	}
	if j.W != 0 {
		buf.WriteString(`"w":`)
		fflib.FormatBits2(buf, uint64(j.W), 10, j.W < 0)
		buf.WriteByte(',')
	}
	if j.Wratio != 0 {
		buf.WriteString(`"wratio":`)
		fflib.FormatBits2(buf, uint64(j.Wratio), 10, j.Wratio < 0)
		buf.WriteByte(',')
	}
	if j.Hratio != 0 {
		buf.WriteString(`"hratio":`)
		fflib.FormatBits2(buf, uint64(j.Hratio), 10, j.Hratio < 0)
		buf.WriteByte(',')
	}
	if j.Exp != 0 {
		buf.WriteString(`"exp":`)
		fflib.FormatBits2(buf, uint64(j.Exp), 10, j.Exp < 0)
		buf.WriteByte(',')
	}
	if j.Ext != nil {
		if true {
			buf.WriteString(`"ext":`)

			{

				obj, err = j.Ext.MarshalJSON()
				if err != nil {
					return err
				}
				buf.Write(obj)

			}
			buf.WriteByte(',')
		}
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffjtBidbase = iota
	ffjtBidnosuchkey

	ffjtBidID

	ffjtBidImpID

	ffjtBidPrice

	ffjtBidAdID

	ffjtBidNURL

	ffjtBidBURL

	ffjtBidLURL

	ffjtBidAdMarkup

	ffjtBidAdvDomain

	ffjtBidIURL

	ffjtBidTactic

	ffjtBidBundle

	ffjtBidCampaignID

	ffjtBidCreativeID

	ffjtBidQagmediarating

	ffjtBidLanguage

	ffjtBidCat

	ffjtBidAttr

	ffjtBidAPI

	ffjtBidProtocol

	ffjtBidDealID

	ffjtBidH

	ffjtBidW

	ffjtBidWratio

	ffjtBidHratio

	ffjtBidExp

	ffjtBidExt
)

var ffjKeyBidID = []byte("id")

var ffjKeyBidImpID = []byte("impid")

var ffjKeyBidPrice = []byte("price")

var ffjKeyBidAdID = []byte("adid")

var ffjKeyBidNURL = []byte("nurl")

var ffjKeyBidBURL = []byte("burl")

var ffjKeyBidLURL = []byte("lurl")

var ffjKeyBidAdMarkup = []byte("adm")

var ffjKeyBidAdvDomain = []byte("adomain")

var ffjKeyBidIURL = []byte("iurl")

var ffjKeyBidTactic = []byte("tactic")

var ffjKeyBidBundle = []byte("bundle")

var ffjKeyBidCampaignID = []byte("cid")

var ffjKeyBidCreativeID = []byte("crid")

var ffjKeyBidQagmediarating = []byte("qagmediarating")

var ffjKeyBidLanguage = []byte("language")

var ffjKeyBidCat = []byte("cat")

var ffjKeyBidAttr = []byte("attr")

var ffjKeyBidAPI = []byte("api")

var ffjKeyBidProtocol = []byte("protocol")

var ffjKeyBidDealID = []byte("dealid")

var ffjKeyBidH = []byte("h")

var ffjKeyBidW = []byte("w")

var ffjKeyBidWratio = []byte("wratio")

var ffjKeyBidHratio = []byte("hratio")

var ffjKeyBidExp = []byte("exp")

var ffjKeyBidExt = []byte("ext")

// UnmarshalJSON umarshall json - template of ffjson
func (j *Bid) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *Bid) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtBidbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtBidnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffjKeyBidAdID, kn) {
						currentKey = ffjtBidAdID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidAdMarkup, kn) {
						currentKey = ffjtBidAdMarkup
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidAdvDomain, kn) {
						currentKey = ffjtBidAdvDomain
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidAttr, kn) {
						currentKey = ffjtBidAttr
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidAPI, kn) {
						currentKey = ffjtBidAPI
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'b':

					if bytes.Equal(ffjKeyBidBURL, kn) {
						currentKey = ffjtBidBURL
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidBundle, kn) {
						currentKey = ffjtBidBundle
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'c':

					if bytes.Equal(ffjKeyBidCampaignID, kn) {
						currentKey = ffjtBidCampaignID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidCreativeID, kn) {
						currentKey = ffjtBidCreativeID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidCat, kn) {
						currentKey = ffjtBidCat
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'd':

					if bytes.Equal(ffjKeyBidDealID, kn) {
						currentKey = ffjtBidDealID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'e':

					if bytes.Equal(ffjKeyBidExp, kn) {
						currentKey = ffjtBidExp
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidExt, kn) {
						currentKey = ffjtBidExt
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'h':

					if bytes.Equal(ffjKeyBidH, kn) {
						currentKey = ffjtBidH
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidHratio, kn) {
						currentKey = ffjtBidHratio
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffjKeyBidID, kn) {
						currentKey = ffjtBidID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidImpID, kn) {
						currentKey = ffjtBidImpID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidIURL, kn) {
						currentKey = ffjtBidIURL
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffjKeyBidLURL, kn) {
						currentKey = ffjtBidLURL
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidLanguage, kn) {
						currentKey = ffjtBidLanguage
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'n':

					if bytes.Equal(ffjKeyBidNURL, kn) {
						currentKey = ffjtBidNURL
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffjKeyBidPrice, kn) {
						currentKey = ffjtBidPrice
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidProtocol, kn) {
						currentKey = ffjtBidProtocol
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'q':

					if bytes.Equal(ffjKeyBidQagmediarating, kn) {
						currentKey = ffjtBidQagmediarating
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffjKeyBidTactic, kn) {
						currentKey = ffjtBidTactic
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'w':

					if bytes.Equal(ffjKeyBidW, kn) {
						currentKey = ffjtBidW
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyBidWratio, kn) {
						currentKey = ffjtBidWratio
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidExt, kn) {
					currentKey = ffjtBidExt
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidExp, kn) {
					currentKey = ffjtBidExp
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidHratio, kn) {
					currentKey = ffjtBidHratio
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidWratio, kn) {
					currentKey = ffjtBidWratio
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidW, kn) {
					currentKey = ffjtBidW
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidH, kn) {
					currentKey = ffjtBidH
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidDealID, kn) {
					currentKey = ffjtBidDealID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidProtocol, kn) {
					currentKey = ffjtBidProtocol
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidAPI, kn) {
					currentKey = ffjtBidAPI
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidAttr, kn) {
					currentKey = ffjtBidAttr
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidCat, kn) {
					currentKey = ffjtBidCat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidLanguage, kn) {
					currentKey = ffjtBidLanguage
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidQagmediarating, kn) {
					currentKey = ffjtBidQagmediarating
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidCreativeID, kn) {
					currentKey = ffjtBidCreativeID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidCampaignID, kn) {
					currentKey = ffjtBidCampaignID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidBundle, kn) {
					currentKey = ffjtBidBundle
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidTactic, kn) {
					currentKey = ffjtBidTactic
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidIURL, kn) {
					currentKey = ffjtBidIURL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidAdvDomain, kn) {
					currentKey = ffjtBidAdvDomain
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidAdMarkup, kn) {
					currentKey = ffjtBidAdMarkup
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidLURL, kn) {
					currentKey = ffjtBidLURL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidBURL, kn) {
					currentKey = ffjtBidBURL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidNURL, kn) {
					currentKey = ffjtBidNURL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidAdID, kn) {
					currentKey = ffjtBidAdID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidPrice, kn) {
					currentKey = ffjtBidPrice
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidImpID, kn) {
					currentKey = ffjtBidImpID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyBidID, kn) {
					currentKey = ffjtBidID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtBidnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtBidID:
					goto handle_ID

				case ffjtBidImpID:
					goto handle_ImpID

				case ffjtBidPrice:
					goto handle_Price

				case ffjtBidAdID:
					goto handle_AdID

				case ffjtBidNURL:
					goto handle_NURL

				case ffjtBidBURL:
					goto handle_BURL

				case ffjtBidLURL:
					goto handle_LURL

				case ffjtBidAdMarkup:
					goto handle_AdMarkup

				case ffjtBidAdvDomain:
					goto handle_AdvDomain

				case ffjtBidIURL:
					goto handle_IURL

				case ffjtBidTactic:
					goto handle_Tactic

				case ffjtBidBundle:
					goto handle_Bundle

				case ffjtBidCampaignID:
					goto handle_CampaignID

				case ffjtBidCreativeID:
					goto handle_CreativeID

				case ffjtBidQagmediarating:
					goto handle_Qagmediarating

				case ffjtBidLanguage:
					goto handle_Language

				case ffjtBidCat:
					goto handle_Cat

				case ffjtBidAttr:
					goto handle_Attr

				case ffjtBidAPI:
					goto handle_API

				case ffjtBidProtocol:
					goto handle_Protocol

				case ffjtBidDealID:
					goto handle_DealID

				case ffjtBidH:
					goto handle_H

				case ffjtBidW:
					goto handle_W

				case ffjtBidWratio:
					goto handle_Wratio

				case ffjtBidHratio:
					goto handle_Hratio

				case ffjtBidExp:
					goto handle_Exp

				case ffjtBidExt:
					goto handle_Ext

				case ffjtBidnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_ID:

	/* handler: j.ID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ImpID:

	/* handler: j.ImpID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ImpID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Price:

	/* handler: j.Price type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Price = float64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AdID:

	/* handler: j.AdID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.AdID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_NURL:

	/* handler: j.NURL type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.NURL = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_BURL:

	/* handler: j.BURL type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.BURL = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_LURL:

	/* handler: j.LURL type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.LURL = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AdMarkup:

	/* handler: j.AdMarkup type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.AdMarkup = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AdvDomain:

	/* handler: j.AdvDomain type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.AdvDomain = nil
		} else {

			j.AdvDomain = []string{}

			wantVal := true

			for {

				var tmpJAdvDomain string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJAdvDomain type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmpJAdvDomain = string(string(outBuf))

					}
				}

				j.AdvDomain = append(j.AdvDomain, tmpJAdvDomain)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_IURL:

	/* handler: j.IURL type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.IURL = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Tactic:

	/* handler: j.Tactic type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Tactic = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Bundle:

	/* handler: j.Bundle type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Bundle = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CampaignID:

	/* handler: j.CampaignID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.CampaignID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CreativeID:

	/* handler: j.CreativeID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.CreativeID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Qagmediarating:

	/* handler: j.Qagmediarating type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Qagmediarating = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Language:

	/* handler: j.Language type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Language = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Cat:

	/* handler: j.Cat type=[]string kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.Cat = nil
		} else {

			j.Cat = []string{}

			wantVal := true

			for {

				var tmpJCat string

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJCat type=string kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmpJCat = string(string(outBuf))

					}
				}

				j.Cat = append(j.Cat, tmpJCat)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Attr:

	/* handler: j.Attr type=[]int kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.Attr = nil
		} else {

			j.Attr = []int{}

			wantVal := true

			for {

				var tmpJAttr int

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJAttr type=int kind=int quoted=false*/

				{
					if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
						return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
					}
				}

				{

					if tok == fflib.FFTok_null {

					} else {

						tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

						if err != nil {
							return fs.WrapErr(err)
						}

						tmpJAttr = int(tval)

					}
				}

				j.Attr = append(j.Attr, tmpJAttr)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_API:

	/* handler: j.API type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.API = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Protocol:

	/* handler: j.Protocol type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Protocol = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DealID:

	/* handler: j.DealID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.DealID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_H:

	/* handler: j.H type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.H = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_W:

	/* handler: j.W type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.W = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Wratio:

	/* handler: j.Wratio type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Wratio = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Hratio:

	/* handler: j.Hratio type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Hratio = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Exp:

	/* handler: j.Exp type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.Exp = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Ext:

	/* handler: j.Ext type=json.RawMessage kind=slice quoted=false*/

	{
		if tok == fflib.FFTok_null {

			j.Ext = nil

		} else {

			tbuf, err := fs.CaptureField(tok)
			if err != nil {
				return fs.WrapErr(err)
			}

			if j.Ext == nil {
				j.Ext = new(json.RawMessage)
			}

			err = j.Ext.UnmarshalJSON(tbuf)
			if err != nil {
				return fs.WrapErr(err)
			}
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
